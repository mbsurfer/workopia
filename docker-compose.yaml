services:
  server:
    build:
      context: .
      dockerfile: dockerfiles/nginx.dockerfile
    ports:
      # bind port 80 to 8000 on the host machine
      - '8000:80'
    volumes:
      # bind the local src (our laravel app) directory to the container's /var/www/html directory
      - ./src:/var/www/html
      # pass in our own configuration by binding to the local path
      # set as read only with :ro, the container should not change the file
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf:ro
    depends_on:
      - php
      - pgsql
      - pgadmin
  php:
    build:
      context: ./dockerfiles
      dockerfile: php.dockerfile
    volumes:
      # :delegated helps with performace by batching data written back to the host machine
      - ./src:/var/www/html:delegated
  # mysql:
  #   image: mysql:5.7
  #   env_file:
  #     - ./env/mysql.env
  #   volumes:
  #     - mysql_data:/var/lib/mysql
  pgsql:
    image: postgres
    restart: always
    env_file:
      - ./env/pgsql.env
    volumes:
      - pgsql_data:/var/lib/postgresql/data
  pgadmin:
    image: dpage/pgadmin4
    env_file:
      - ./env/pgadmin.env
    ports:
      - '5050:80'
  composer:
    build:
      context: ./dockerfiles
      dockerfile: composer.dockerfile
    volumes:
      - ./src:/var/www/html
  artisan:
    build:
      context: ./dockerfiles
      dockerfile: php.dockerfile
    volumes:
      - ./src:/var/www/html
    entrypoint: [ "php", "/var/www/html/artisan" ]
  vite:
    build:
      context: .
      dockerfile: dockerfiles/vite.dockerfile
    volumes:
      - ./src:/app
  npm:
    build:
      context: ./dockerfiles
      dockerfile: npm.dockerfile
    volumes:
      - ./src:/var/www/html
    entrypoint: [ "npm" ]
  npx:
    build:
      context: ./dockerfiles
      dockerfile: npm.dockerfile
    volumes:
      - ./src:/var/www/html
    entrypoint: [ "npx" ]

volumes:
  # mysql_data:
  pgsql_data:
